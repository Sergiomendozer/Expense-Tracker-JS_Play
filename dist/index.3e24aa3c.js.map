{"mappings":"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","sources":["src/index.mjs"],"sourcesContent":["const balance = document.getElementById(\"balance\"); // Get the balance element\nconst money_plus = document.getElementById(\"money-plus\"); // Get the money-plus element for income\nconst money_minus = document.getElementById(\"money-minus\"); // Get the money-minus element for expenses\nconst list = document.getElementById(\"list\"); // Get the list element where transactions will be displayed\nconst form = document.getElementById(\"form\"); // Get the form element for submitting new transactions\nconst text = document.getElementById(\"text\"); // Get the input element for the transaction text\nconst amount = document.getElementById(\"amount\"); // Get the input element for the transaction amount\n\n// Retrieve transactions from local storage or set to empty array if not present\nconst localStorageTransactions = JSON.parse(\n  localStorage.getItem(\"transactions\"),\n);\nlet transactions =\n  localStorage.getItem(\"transactions\") !== null ? localStorageTransactions : [];\n\n// Function to add a new transaction from the form\nfunction addTransaction(e) {\n  e.preventDefault(); // Prevent the form from submitting\n\n  // Check if text and amount fields are filled\n  if (text.value.trim() === \"\" || amount.value.trim() === \"\") {\n    alert(\"Please add a text and amount\");\n  } else {\n    const transaction = {\n      id: generateID(), // Generate a unique ID for the transaction\n      text: text.value, // Text from the form\n      amount: +amount.value, // Amount from the form, converted to a number\n    };\n\n    transactions.push(transaction); // Add to transactions array\n\n    addTransactionDOM(transaction); // Add transaction to the DOM\n\n    updateValues(); // Update the balance, income, and expense\n\n    updateLocalStorage(); // Update local storage with new transaction\n\n    text.value = \"\"; // Clear the text input\n    amount.value = \"\"; // Clear the amount input\n  }\n}\n\n// Function to generate a random ID for a new transaction\nfunction generateID() {\n  return Math.floor(Math.random() * 100000000);\n}\n\n// Function to add a transaction to the DOM list\nfunction addTransactionDOM(transaction) {\n  const sign = transaction.amount < 0 ? \"-\" : \"+\"; // Determine the sign based on the transaction amount\n\n  const item = document.createElement(\"li\"); // Create a new list item\n\n  // Add a class based on the transaction value (income or expense)\n  item.classList.add(transaction.amount < 0 ? \"minus\" : \"plus\");\n\n  // Set the inner HTML of the list item\n  item.innerHTML = `\n    ${transaction.text} <span>${sign}${Math.abs(\n      transaction.amount,\n    )}</span> <button class=\"delete-btn\" onclick=\"removeTransaction(${\n      transaction.id\n    })\">x</button>\n  `;\n\n  list.appendChild(item); // Append the new item to the list\n}\n\n// Function to update the total balance, income, and expense\nfunction updateValues() {\n  const amounts = transactions.map((transaction) => transaction.amount); // Extract the transaction amounts\n\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2); // Calculate the total balance\n\n  const income = amounts // Calculate the total income\n    .filter((item) => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2);\n\n  const expense = // Calculate the total expense\n  (\n    amounts.filter((item) => item < 0).reduce((acc, item) => (acc += item), 0) *\n    -1\n  ).toFixed(2);\n\n  // Update the DOM with the new values\n  balance.innerText = `$${total}`;\n  money_plus.innerText = `$${income}`;\n  money_minus.innerText = `$${expense}`;\n}\n\n// Function to remove a transaction by ID\nfunction removeTransaction(id) {\n  transactions = transactions.filter((transaction) => transaction.id !== id); // Filter out the transaction with the given ID\n\n  updateLocalStorage(); // Update local storage to reflect the removal\n\n  init(); // Reinitialize the app\n}\n\n// Function to update local storage with the current transactions\nfunction updateLocalStorage() {\n  localStorage.setItem(\"transactions\", JSON.stringify(transactions));\n}\n\n// Function to initialize the app\nfunction init() {\n  list.innerHTML = \"\"; // Clear the transaction list\n\n  transactions.forEach(addTransactionDOM); // Add each transaction to the DOM\n  updateValues(); // Update the balance, income, and expense\n}\n\ninit(); // Initialize the app\n\nform.addEventListener(\"submit\", addTransaction); // Add event listener for form submission\n"],"names":[],"version":3,"file":"index.3e24aa3c.js.map","sourceRoot":"/__parcel_source_root/"}